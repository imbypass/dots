#!/bin/bash

# I'm sure there are better ways of doing this, but I REALLY don't work with bash/zsh scripts often.
# This just seemed like a more convenient way to execute some of the common shit that I do on my PC.

UTIL_VERSION="0.6.0"

# Define color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[0;37m'
BOLD='\033[1m'
UNDERLINE='\033[4m'
RESET='\033[0m'

aur_git() {
  git clone --single-branch --branch $1 https://github.com/archlinux/aur.git ~/Documents/aur_packages/$1
  cd ~/Documents/aur_packages/$1
  makepkg -si
}

print_help() {
  # harmony-show-logo
  printf "usage: harmonyctl <command> [args...|--help]\n\n"
  printf "commands:\n"
  printf "  ${ACCENT}clean\t\t ${RESET}->\tRemove orphaned packages from the system.\n"
  printf "  ${ACCENT}edit <value>\t ${RESET}->\tEdit parts of HARMONY.\n"
  printf "  ${ACCENT}expose\t ${RESET}->\tDisplay the desktop expose.\n"
  printf "  ${ACCENT}float\t\t ${RESET}->\tToggle floating window mode for HARMONY.\n"
  printf "  ${ACCENT}fonts\t\t ${RESET}->\tPrint all installed fonts.\n"
  printf "  ${ACCENT}gamemode\t ${RESET}->\tToggle game mode for HARMONY.\n"
  printf "  ${ACCENT}help\t\t ${RESET}->\tDisplay this help prompt.\n"
  printf "  ${ACCENT}list <value>\t ${RESET}->\tList available edit/reload values for HARMONY.\n"
  printf "  ${ACCENT}mirrors\t ${RESET}->\tUpdate Arch repository mirror list using REFLECTOR.\n"
  printf "  ${ACCENT}ram\t\t ${RESET}->\tForcibly frees cached RAM.\n"
  printf "  ${ACCENT}reload <value> ${RESET}->\tReload parts of HARMONY's interface.\n"
  printf "  ${ACCENT}upload\t ${RESET}->\tUpload the clipboard to 0x0.st and copy the result.\n"
  printf "  ${ACCENT}version\t ${RESET}->\tDisplay the current version of HARMONY\n"
}
print_version() {
  harmony-show-logo
  printf "${RESET}A Hyprland rice by ${ACCENT}@imbypass_\t\t${RESET}${UTIL_VERSION}"
  printf "\n"
}
print_lists() {
  case "$1" in
  "")
    printf "\navailable options:\n"
    printf "  ${YELLOW}edit${RESET}, ${YELLOW}list${RESET}, ${YELLOW}reload"
    printf "\n"
    ;;
  "edit")
    printf "\navailable options:\n"
    printf "  ${YELLOW}aliases${RESET}, ${YELLOW}apps${RESET}, ${YELLOW}cleanup${RESET}, ${YELLOW}colors${RESET}, ${YELLOW}custom${RESET}, ${YELLOW}decoration${RESET}, ${YELLOW}defaults${RESET}, ${YELLOW}dock${RESET}, ${YELLOW}env${RESET}, ${YELLOW}fish${RESET}, ${YELLOW}foot${RESET}, ${YELLOW}ghostty${RESET}, ${YELLOW}hypr${RESET}, ${YELLOW}keys${RESET}, ${YELLOW}layout${RESET}, ${YELLOW}lock${RESET}, ${YELLOW}mako${RESET}, ${YELLOW}path${RESET}, ${YELLOW}pins${RESET}, ${YELLOW}plugins${RESET}, ${YELLOW}rofi${RESET}, ${YELLOW}rules${RESET}, ${YELLOW}starship${RESET}, ${YELLOW}startup${RESET}, ${YELLOW}swaync${RESET}, ${YELLOW}tmux${RESET}, ${YELLOW}walker${RESET}, ${YELLOW}waybar"
    printf "\n"
    ;;
  "list")
    printf "\navailable options:\n"
    printf "  ${YELLOW}edit${RESET}, ${YELLOW}list${RESET}, ${YELLOW}reload"
    printf "\n"
    ;;
  "reload")
    printf "\navailable options:\n"
    printf "  ${YELLOW}dock${RESET}, ${YELLOW}ghostty${RESET}, ${YELLOW}gtk${RESET}, ${YELLOW}hypr${RESET}, ${YELLOW}hyprpanel${RESET}, ${YELLOW}mako${RESET}, ${YELLOW}mconnect${RESET}, ${YELLOW}pcmanfm${RESET}, ${YELLOW}spotify${RESET}, ${YELLOW}steam${RESET}, ${YELLOW}swaync${RESET}, ${YELLOW}walker${RESET}, ${YELLOW}waybar${RESET}, ${YELLOW}waybar_full"
    printf "\n"
    ;;
  esac
}



edit_prompt() {
  case "$1" in

  # Edit the script itself
  "")
    cd ~/.local/bin/ && $EDITOR $0
    ;;

  # Edit Hyprland configuration
  "colors")
    cd ~/.config/hypr/ && $EDITOR extras/colors.conf
    ;;
  "hypr")
    cd ~/.config/hypr/ && $EDITOR hyprland.conf
    ;;
  "keys")
    cd ~/.config/hypr/ && $EDITOR core/binds.conf
    ;;
  "binds")
    cd ~/.config/hypr/ && $EDITOR core/binds.conf
    ;;
  "apps")
    cd ~/.config/hypr/ && $EDITOR extras/user.conf
    ;;
  "decoration")
    cd ~/.config/hypr/ && $EDITOR core/decoration.conf
    ;;
  "startup")
    cd ~/.config/hypr/ && $EDITOR core/startup.conf
    ;;
  "plugins")
    cd ~/.config/hypr/ && $EDITOR extras/plugins.conf
    ;;
  "layout")
    cd ~/.config/hypr/ && $EDITOR core/layout.conf
    ;;
  "rules")
    cd ~/.config/hypr/ && $EDITOR . extras/rules.conf
    ;;
  "env")
    cd ~/.config/hypr/ && $EDITOR core/environment.conf
    ;;
  "custom")
    cd ~/.config/hypr/ && $EDITOR extras/general.conf
    ;;
  "lock")
    cd ~/.config/hypr/ && $EDITOR hyprlock.conf
    ;;

  # Edit any user configs
  "aliases")
    cd ~/.config/fish/ && $EDITOR conf.d/alias.fish
    ;;
  "path")
    cd ~/.config/fish/ && $EDITOR conf.d/PATH.fish
    ;;
  "cleanup")
    cd ~/.local/bin && $EDITOR cleanup
    ;;
  "dock")
    cd ~/.config/nwg-dock-hyprland && $EDITOR style.css
    ;;
  "mako")
    cd ~/.config/mako && $EDITOR config
    ;;
  "swaync")
    cd ~/.config/swaync && $EDITOR config.json
    ;;
  "walker")
    cd ~/.config/walker && $EDITOR config.json
    ;;
  "waybar")
    cd ~/.config/waybar && $EDITOR config.jsonc
    ;;
  "rofi")
    cd ~/.config/rofi && $EDITOR config.rasi
    ;;
  "ghostty")
    cd ~/.config/ghostty && $EDITOR config
    ;;
  "foot")
    cd ~/.config/foot && $EDITOR foot.ini
    ;;
  "tmux")
    cd ~/.config/tmux && $EDITOR tmux.conf
    ;;
  "fish")
    cd ~/.config/ && $EDITOR fish/config.fish
    ;;
  "defaults")
    cd ~/.config/ && $EDITOR mimeapps.list
    ;;
  "pins")
    cd ~/.cache/ && $EDITOR nwg-dock-pinned
    ;;
  "starship")
    cd ~/.config/ && $EDITOR starship.toml
    ;;
  esac
}
reload_prompt() {
  case "$1" in
  "")
    printf "${BOLD}${BLUE}:: ${RESET}No service specified. Exiting..\n"
    ;;
  "all")
    reload_prompt "gtk"
    reload_prompt "hypr"
    reload_prompt "dock"
    reload_prompt "spotify"
    reload_prompt "steam"
    reload_prompt "walker"
    reload_prompt "bongocat"
    ;;
  "bongocat")
    printf "${BOLD}${BLUE}:: ${RESET}Reloading bongocat..\n"
    killall -9 bongocat >/dev/null
    ~/.local/bin/bongocat & disown
    reload_prompt "waybar"
    ;;
  "dock")
    printf "${BOLD}${BLUE}:: ${RESET}Reloading nwg-dock-hyprland..\n"
    killall -9 nwg-dock-hyprland >/dev/null
    toggle_dock
    sleep .1
    printf "${BOLD}${BLUE}:: ${RESET}Hiding nwg-dock-hyprland..\n"
    killall -37 nwg-dock-hyprland >/dev/null
    ;;
  "waybar")
    if [ "$2" = "full" ]; then
        printf "${BOLD}${BLUE}:: ${RESET}Reloading waybar (full)..\n"
        killall -9 waybar >/dev/null
        waybar &
        disown
    else
        printf "${BOLD}${BLUE}:: ${RESET}Reloading waybar (partial)..\n"
        killall -USR2 waybar >/dev/null
    fi
    ;;
  "walker")
    printf "${BOLD}${BLUE}:: ${RESET}Reloading walker service..\n"
    killall -9 walker >/dev/null
    walker --gapplication-service & disown
    ;;
  "nautilus")
    printf "${BOLD}${BLUE}:: ${RESET}Reloading Nautilus..\n"
    nautilus -q & disown
    ;;
  "mako")
    printf "${BOLD}${BLUE}:: ${RESET}Reloading mako..\n"
    sleep .5 && makoctl reload >/dev/null
    ;;
  "hypr")
    printf "${BOLD}${BLUE}:: ${RESET}Reloading Hyprland..\n"
    hyprctl reload >/dev/null
    ;;
  "swaync")
    printf "${BOLD}${BLUE}:: ${RESET}Reloading swaync..\n"
    swaync-client -rs >/dev/null
    ;;
  "hyprpanel")
    printf "${BOLD}${BLUE}:: ${RESET}Reloading HyprPanel..\n"
    killall -9 gjs >/dev/null
    hyprpanel & disown
    ;;
  "ignis")
    printf "${BOLD}${BLUE}:: ${RESET}Reloading Ignis..\n"
    killall -9 ignis >/dev/null
    ignis init & disown
    ;;
  "ghostty")
    printf "${BOLD}${BLUE}:: ${RESET}Reloading Ghostty..\n"
    killall -9 ghostty >/dev/null
    ghostty \
      --gtk-single-instance=true \
      --quit-after-last-window-closed=false \
      --initial-window=false & disown
    ;;
  "mconnect")
    printf "${BOLD}${BLUE}:: ${RESET}Reloading mconnect..\n"
    killall -9 mconnect >/dev/null
    mconnect -d & disown
    ;;
  "gtk")
    printf "${BOLD}${BLUE}:: ${RESET}Reloading gtk..\n"
    cd ~/.themes/phocus && npm run build >/dev/null
    gsettings set org.gnome.desktop.interface gtk-theme phocus_refresh >/dev/null
    gsettings set org.gnome.desktop.interface gtk-theme phocus >/dev/null
    ;;
  "spotify")
    printf "${BOLD}${BLUE}:: ${RESET}Reloading spicetify..\n"
    killall -9 spotify > /dev/null
    spicetify apply >/dev/null
    ;;
  "pcmanfm")
    printf "${BOLD}${BLUE}:: ${RESET}Reloading pcmanfm..\n"
    killall -9 pcmanfm-qt >/dev/null
    pcmanfm-qt --desktop & disown
    ;;
  "steam")
    printf "${BOLD}${BLUE}:: ${RESET}Reloading Steam..\n"
    # ~/.local/bin/hex2rgb ~/.local/share/adwaita-steam/adwaita/colorthemes/base16/base16.css
    sleep 2 && cd ~/.local/share/adwaita-steam/ && ./install.py \
      --color-theme base16 \
      --extras library/hide_whats_new \
      --font zedmono \
      --custom-css
    ;;
  esac
}
init_prompt() {
  case "$1" in
  "setup")
    printf "${BOLD}${BLUE}:: ${RESET}Initializing miscellaneous setup files..\n"
    gsettings set org.gnome.desktop.wm.preferences button-layout ":"
    ;;
  "xdg")
    printf "${BOLD}${BLUE}:: ${RESET}Initializing xdg-desktop-portal..\n"
    sleep 1
    killall xdg-desktop-portal-hyprland >/dev/null
    killall xdg-desktop-portal >/dev/null
    sleep 1
    /usr/lib/xdg-desktop-portal-hyprland >/dev/null &
    sleep 2
    /usr/lib/xdg-desktop-portal >/dev/null &
    sleep 1
    ;;
  "wp")
    printf "${BOLD}${BLUE}:: ${RESET}Initializing wallpaper daemon..\n"
	killall yin >/dev/null &
    sleep .5 && yin &
	sleep .5 && yinctl --restore &
    ;;
  esac
}
popout_prompt() {
  case "$1" in
  "apps")
    walker -m applications
    ;;
  "a")
    walker -m applications
    ;;
  "theme")
    walker -m themes
    ;;
  "t")
    walker -m themes
    ;;
  "wall")
    walker -n -m wallpaper
    ;;
  "w")
    walker -n -m wallpaper
    ;;
  "")
    printf "ok"
    ;;
  esac
}


file_upload() {
  wl-paste | up -t $1 | wl-copy
  notify-send -u normal -a hyprshot -t 3500 "0x0.st" "Image uploaded and copied to clipboard." -i ~/.local/share/harmony/logo.svg
}
free_cache() {
  printf "${BOLD}${BLUE}:: ${RESET}Freeing cached RAM..\n"
  printf 3 | sudo tee /proc/sys/vm/drop_caches >/dev/null
}

search_steamapps() {
  for id in $(ls ~/.local/share/Steam/steamapps/compatdata); do
    echo "$id: $(curl -s "https://store.steampowered.com/app/$id/" | grep -oP '(?<=<title>)[^<]*')"
  done
}
search_fonts() {
  printf "${BOLD}${BLUE}:: ${RESET}Listing installed fonts..\n"
  fc-list | grep -ioE ": [^:]*$1[^:]+:" | sed -E 's/(^: |:)//g' | tr , \\n | sort | uniq
}

remove_orphans() {
  printf "${BOLD}${BLUE}:: ${RESET}Removing orphaned packages..\n"
  sudo pacman -Rns $(pacman -Qdtq) --noconfirm >/dev/null

  printf "${BOLD}${BLUE}:: ${RESET}Clearing package cache..\n"
  yes | paru -Sc --noconfirm > /dev/null
}
show_expose() {
  printf "${BOLD}${BLUE}:: ${RESET}Showing desktop expose..\n"
  sleep 0.15
  hyprctl dispatch hyprexpo:expo show >/dev/null
  hyprctl dispatch overview:toggle >/dev/null
}
take_screenshot() {
  TIMESTAMP=$(date +%d%m%Y_%H%M%S)
  FILENAME="screenshot_${TIMESTAMP}.png"

  case "$1" in
  "")
    hyprshot -m region -z -f ${FILENAME}
    ;;
  "region")
    hyprshot -m region -z -f ${FILENAME}
    ;;
  "--region")
    hyprshot -m region -z -f ${FILENAME}
    ;;
  "screen")
    hyprshot -m output -z -f ${FILENAME}
    ;;
  "--screen")
    hyprshot -m output -z -f ${FILENAME}
    ;;
  "window")
    hyprshot -m window -z -f ${FILENAME}
    ;;
  "--window")
    hyprshot -m window -z -f ${FILENAME}
    ;;
  esac

  if [[ -f "${SCREENSHOTS_DIR}/${FILENAME}" ]]; then
    canberra-gtk-play -i camera-shutter
  fi
}


toggle_blur() {
  printf "${BOLD}${BLUE}:: ${RESET}Toggling blur..\n"
  HYPRBLUR=$(hyprctl getoption decoration:blur:enabled | awk 'NR==1{print $2}')
  if [ "$HYPRBLUR" = 0 ]; then
    hyprctl keyword decoration:blur:enabled yes
  else
    hyprctl keyword decoration:blur:enabled no
  fi
  hyprshade on vibrance >/dev/null
}
toggle_dock() {
  printf "${BOLD}${BLUE}:: ${RESET}Toggling dock visibility..\n"
  killall nwg-dock-hyprland >/dev/null || nwg-dock-hyprland -x -r -mb 5 -mt 25 -i 40 -nolauncher -iw "secret,special" &
  disown
}
toggle_floatwindows() {
  printf "${BOLD}${BLUE}:: ${RESET}Toggling all floating windows..\n"
  notify-send -u normal -a Hyprland -t 3500 "Harmony" "Toggled Window Tiling" -i ~/.local/share/harmony/logo.svg
  hyprctl dispatch workspaceopt allfloat >/dev/null
}
toggle_gamemode() {
  printf "${BOLD}${BLUE}:: ${RESET}Toggling game mode..\n"
  HYPRGAMEMODE=$(hyprctl getoption animations:enabled | awk 'NR==1{print $2}')
  OS=$(cat /etc/os-release | grep -E '^PRETTY_NAME=' | cut -d'"' -f2 | cut -d'=' -f2)
  if [ "$HYPRGAMEMODE" = 1 ]; then
    notify-send -u normal -a Hyprland -t 3500 "Harmony" "Game Mode Enabled" -i ~/.local/share/harmony/logo.svg
    hyprctl --batch "\
                keyword animations:enabled 0;\
                keyword decoration:drop_shadow 0;\
                keyword decoration:blur:enabled 0;\
                keyword general:gaps_in 0;\
                keyword general:gaps_out 0;\
                keyword general:border_size 1;\
                keyword decoration:rounding 0" >/dev/null
    exit
  else
    notify-send -u normal -a Hyprland -t 3500 "Harmony" "Game Mode Disabled" -i ~/.local/share/harmony/logo.svg
  fi
  hyprctl reload >/dev/null
  hyprshade on vibrance >/dev/null
  reload_prompt "ignis"
}
toggle_gnome_buttons() {
  printf "${BOLD}${BLUE}:: ${RESET}Toggling GNOME buttons..\n"
  BUTTONS=$(gsettings get org.gnome.desktop.wm.preferences button-layout)
  echo ${BUTTONS}
  if [ "$BUTTONS" = "':'" ]; then
    gsettings set org.gnome.desktop.wm.preferences button-layout "appmenu:minimize,close"
  else
    gsettings set org.gnome.desktop.wm.preferences button-layout ":"
  fi
}


change_titlebars() {
  CONFIG="$HOME/.config/hypr/extras/plugins/hyprbars.conf"

  TB_THEME=$1

  if [[ "$TB_THEME" == "win" ]]; then
    TB_THEME="windows"
  fi
  if [[ "$TB_THEME" == "mac" ]]; then
    TB_THEME="macos"
  fi

  # Update config file
  sed -i "s|^source = hyprbars/.*\.conf$|source = hyprbars/$TB_THEME.conf|" "$CONFIG"

  #if statement to check for specific values
  if [[ "$TB_THEME" == "macos" ]]; then
    change_rounding 10
  elif [[ "$TB_THEME" == "windows" ]]; then
    change_rounding 8
    if [[ "$2" == "11" ]]; then
      change_rounding 8
    elif [[ "$2" == "10" ]]; then
      change_rounding 0
    fi
  elif [[ "$TB_THEME" == "kde" ]]; then
    change_rounding 4
  fi

  # echo "Hyprbars theme changed to: $1"
}
change_rounding() {
  CONFIG="$HOME/.config/hypr/core/decoration/rounding.conf"

  # Check if number provided
  if [[ ! "$1" =~ ^[0-9]+$ ]]; then
    echo "Usage: $0 <number>"
    echo "Example: $0 12"
    exit 1
  fi

  # Update config file
  sed -i "1s/^\$corner_radius = [0-9]*$/\$corner_radius = $1/" "$CONFIG"

  # echo "Rounding changed to: $1"
}

change_colorscheme() {
    flavours apply $1
    flavours -c ~/.config/flavours/papirus-icons.toml apply $1
    notify-send -u normal -i ~/.local/share/harmony/logo.svg -a hyprland -t 3550 Harmony "Theme changed!"
}



update_packages() {
  harmony-show-logo
  printf "${BOLD}${BLUE}:: ${RESET}Running system update..\n"
  printf " ${YELLOW}==> ${NC}Checking for official package updates..${RESET}\n"
  sudo pacman -Syu
  printf " ${YELLOW}==> ${NC}Checking for AUR updates..${RESET}\n"
  paru
  printf " ${YELLOW}==> ${NC}Checking for flatpak updates..${RESET}\n"
  flatpak update
  notify-send -u low -a Hyprland -t 3500 "Harmony" "System update completed!" -i ~/.local/share/harmony/logo.svg
  harmony-show-done
}
update_mirrors() {
  printf "${BOLD}${BLUE}:: ${RESET}Updating mirrors..\n"
  sudo reflector --verbose --country US --latest 8 --protocol http,https --sort rate --save /etc/pacman.d/mirrorlist >/dev/null
  notify-send -u low -a Hyprland -t 3500 "Harmony" "Mirrors updated!" -i ~/.local/share/harmony/logo.svg
}
update_colors() {
  printf "${BOLD}${BLUE}:: ${RESET}Generating colorscheme from wallpaper..\n"
  /usr/bin/wal -sti ~/.local/share/wallpapers/wallpaper.png --cols16 >/dev/null &
  /usr/bin/flavours generate dark ~/.local/share/wallpapers/wallpaper.png -s match-wallpaper >/dev/null &
  /usr/bin/flavours generate dark ~/.local/share/wallpapers/wallpaper.jpg -s match-wallpaper >/dev/null &

  sleep 0.5
  if [[ $(flavours current) = "pywal" ]]; then
      change_colorscheme "pywal"
  fi
  if [[ $(flavours current) = "match-wallpaper" ]]; then
      change_colorscheme "match-wallpaper"
  fi


  reload_prompt "walker"
}
update_spotify() {
    if pgrep -x "spotify" >/dev/null; then
        reload_prompt "spotify"
    else
        spicetify apply >/dev/null
    fi
    killall -9 spotify > /dev/null
}
update_prompt() {
  case "$1" in
  "mirrors")
    update_mirrors
    ;;
  "colors")
    update_colors
    ;;
  "spotify")
    update_spotify
    ;;
  "system")
    update_packages
    ;;
  "")
    printf "ok"
    ;;
  esac
}

set_wallpaper() {
	# save the wallpaper to the global wallpaper file
	if [[ $1 == *.mp4 ]]; then
		 ffmpeg -i $1 -ss 00:00:01.000 -vframes 1 /home/bypass/.local/share/wallpapers/tmp.png
		 mv /home/bypass/.local/share/wallpapers/tmp.png /home/bypass/.local/share/wallpapers/.wallpaper
		 rm /home/bypass/.local/share/wallpapers/tmp.png
	else
		cp $1 /home/bypass/.local/share/wallpapers/.wallpaper
	fi

	# create visible versions with extensions for other tools
	cp /home/bypass/.local/share/wallpapers/.wallpaper /home/bypass/.local/share/wallpapers/wallpaper.png
	cp /home/bypass/.local/share/wallpapers/.wallpaper /home/bypass/.local/share/wallpapers/wallpaper.jpg

	# set wallpaper
	yinctl --pause
	yinctl --color 030305
	notify-send -u normal -a Hyprland -t 3500 "Harmony" "Setting wallpaper.." -i ~/.local/share/harmony/logo.svg
	yinctl --img $1
	yinctl --play

	# update dynamic color scheme
	update_colors
	reload_prompt "ignis"
	reload_prompt "walker"
}



if [[ $1 == "--version" ]]; then
  print_version
elif [[ $1 == "-v" ]]; then
  print_version
elif [[ $1 == "version" ]]; then
  print_version
elif [[ $1 == "v" ]]; then
  print_version

elif [[ $1 == "--help" ]]; then
  print_help
elif [[ $1 == "-h" ]]; then
  print_help
elif [[ $1 == "help" ]]; then
  print_help
elif [[ $1 == "h" ]]; then
  print_help

elif [[ $1 == "aur" ]]; then
  aur_git $2

elif [[ $1 == "list" ]]; then
  print_lists $2
elif [[ $1 == "dock" ]]; then
  toggle_dock
elif [[ $1 == "titlebars" ]]; then
  change_titlebars $2 $3
elif [[ $1 == "titlebar" ]]; then
  change_titlebars $2 $3
elif [[ $1 == "tb" ]]; then
  change_titlebars $2 $3
elif [[ $1 == "rounding" ]]; then
  change_rounding $2
elif [[ $1 == "colorscheme" ]]; then
  change_colorscheme $2
elif [[ $1 == "colors" ]]; then
  change_colorscheme $2
elif [[ $1 == "cs" ]]; then
  change_colorscheme $2
elif [[ $1 == "reload" ]]; then
  reload_prompt $2 $3
elif [[ $1 == "rl" ]]; then
  reload_prompt $2 $3
elif [[ $1 == "wp" ]]; then
  set_wallpaper $2
elif [[ $1 == "wallpaper" ]]; then
  set_wallpaper $2
elif [[ $1 == "edit" ]]; then
  edit_prompt $2
elif [[ $1 == "e" ]]; then
  edit_prompt $2
elif [[ $1 == "ram" ]]; then
  free_cache
elif [[ $1 == "free" ]]; then
  free_cache
elif [[ $1 == "gm" ]]; then
  toggle_gamemode
elif [[ $1 == "game" ]]; then
  toggle_gamemode
elif [[ $1 == "gamemode" ]]; then
  toggle_gamemode
elif [[ $1 == "rm" ]]; then
  remove_orphans
elif [[ $1 == "clean" ]]; then
  remove_orphans
elif [[ $1 == "steam" ]]; then
  search_steamapps
elif [[ $1 == "fonts" ]]; then
  search_fonts
elif [[ $1 == "init" ]]; then
  init_prompt $2 $3
elif [[ $1 == "up" ]]; then
  file_upload $2
elif [[ $1 == "upload" ]]; then
  file_upload $2
elif [[ $1 == "hf" ]]; then
  toggle_floatwindows
elif [[ $1 == "float" ]]; then
  toggle_floatwindows
elif [[ $1 == "blur" ]]; then
  toggle_blur
elif [[ $1 == "nautilus" ]]; then
  toggle_gnome_buttons
elif [[ $1 == "x" ]]; then
  show_expose
elif [[ $1 == "expose" ]]; then
  show_expose
elif [[ $1 == "m" ]]; then
  update_mirrors
elif [[ $1 == "mirrors" ]]; then
  update_mirrors
elif [[ $1 == "update" ]]; then
  update_prompt $2
elif [[ $1 == "u" ]]; then
  update_prompt $2
elif [[ $1 == "popout" ]]; then
  popout_prompt $2
elif [[ $1 == "p" ]]; then
  popout_prompt $2
elif [[ $1 == "screenshot" ]]; then
  take_screenshot $2
elif [[ $1 == "ss" ]]; then
  take_screenshot $2
else
  print_help
fi
